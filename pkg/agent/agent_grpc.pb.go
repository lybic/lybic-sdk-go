//
//protoc --go_out=. --go_opt=paths=source_relative pkg/agent/agent.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: pkg/agent/agent.proto

package agent

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Agent_GetAgentInfo_FullMethodName                = "/lybic.agent.Agent/GetAgentInfo"
	Agent_GetGlobalCommonConfig_FullMethodName       = "/lybic.agent.Agent/GetGlobalCommonConfig"
	Agent_GetCommonConfig_FullMethodName             = "/lybic.agent.Agent/GetCommonConfig"
	Agent_SetGlobalCommonConfig_FullMethodName       = "/lybic.agent.Agent/SetGlobalCommonConfig"
	Agent_SetGlobalCommonLLMConfig_FullMethodName    = "/lybic.agent.Agent/SetGlobalCommonLLMConfig"
	Agent_SetGlobalGroundingLLMConfig_FullMethodName = "/lybic.agent.Agent/SetGlobalGroundingLLMConfig"
	Agent_SetGlobalEmbeddingLLMConfig_FullMethodName = "/lybic.agent.Agent/SetGlobalEmbeddingLLMConfig"
	Agent_RunAgentInstruction_FullMethodName         = "/lybic.agent.Agent/RunAgentInstruction"
	Agent_RunAgentInstructionAsync_FullMethodName    = "/lybic.agent.Agent/RunAgentInstructionAsync"
	Agent_GetAgentTaskStream_FullMethodName          = "/lybic.agent.Agent/GetAgentTaskStream"
	Agent_QueryTaskStatus_FullMethodName             = "/lybic.agent.Agent/QueryTaskStatus"
)

// AgentClient is the client API for Agent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentClient interface {
	// get agent info
	GetAgentInfo(ctx context.Context, in *GetAgentInfoRequest, opts ...grpc.CallOption) (*AgentInfo, error)
	// get agent config
	GetGlobalCommonConfig(ctx context.Context, in *GetGlobalCommonConfigRequest, opts ...grpc.CallOption) (*CommonConfig, error)
	GetCommonConfig(ctx context.Context, in *GetCommonConfigRequest, opts ...grpc.CallOption) (*CommonConfig, error)
	// set agent config
	SetGlobalCommonConfig(ctx context.Context, in *SetGlobalCommonConfigRequest, opts ...grpc.CallOption) (*SetCommonConfigResponse, error)
	SetGlobalCommonLLMConfig(ctx context.Context, in *SetGlobalCommonLLMConfigRequest, opts ...grpc.CallOption) (*LLMConfig, error)
	SetGlobalGroundingLLMConfig(ctx context.Context, in *SetGlobalGroundingLLMConfigRequest, opts ...grpc.CallOption) (*LLMConfig, error)
	// set agent embedding
	SetGlobalEmbeddingLLMConfig(ctx context.Context, in *SetGlobalEmbeddingLLMConfigRequest, opts ...grpc.CallOption) (*LLMConfig, error)
	// run agent sync
	RunAgentInstruction(ctx context.Context, in *RunAgentInstructionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TaskStream], error)
	// run agent async
	RunAgentInstructionAsync(ctx context.Context, in *RunAgentInstructionRequest, opts ...grpc.CallOption) (*RunAgentInstructionAsyncResponse, error)
	// get agent task stream
	GetAgentTaskStream(ctx context.Context, in *GetAgentTaskStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetAgentTaskStreamResponse], error)
	// query task status
	QueryTaskStatus(ctx context.Context, in *QueryTaskStatusRequest, opts ...grpc.CallOption) (*QueryTaskStatusResponse, error)
}

type agentClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentClient(cc grpc.ClientConnInterface) AgentClient {
	return &agentClient{cc}
}

func (c *agentClient) GetAgentInfo(ctx context.Context, in *GetAgentInfoRequest, opts ...grpc.CallOption) (*AgentInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AgentInfo)
	err := c.cc.Invoke(ctx, Agent_GetAgentInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) GetGlobalCommonConfig(ctx context.Context, in *GetGlobalCommonConfigRequest, opts ...grpc.CallOption) (*CommonConfig, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonConfig)
	err := c.cc.Invoke(ctx, Agent_GetGlobalCommonConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) GetCommonConfig(ctx context.Context, in *GetCommonConfigRequest, opts ...grpc.CallOption) (*CommonConfig, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonConfig)
	err := c.cc.Invoke(ctx, Agent_GetCommonConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) SetGlobalCommonConfig(ctx context.Context, in *SetGlobalCommonConfigRequest, opts ...grpc.CallOption) (*SetCommonConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetCommonConfigResponse)
	err := c.cc.Invoke(ctx, Agent_SetGlobalCommonConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) SetGlobalCommonLLMConfig(ctx context.Context, in *SetGlobalCommonLLMConfigRequest, opts ...grpc.CallOption) (*LLMConfig, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LLMConfig)
	err := c.cc.Invoke(ctx, Agent_SetGlobalCommonLLMConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) SetGlobalGroundingLLMConfig(ctx context.Context, in *SetGlobalGroundingLLMConfigRequest, opts ...grpc.CallOption) (*LLMConfig, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LLMConfig)
	err := c.cc.Invoke(ctx, Agent_SetGlobalGroundingLLMConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) SetGlobalEmbeddingLLMConfig(ctx context.Context, in *SetGlobalEmbeddingLLMConfigRequest, opts ...grpc.CallOption) (*LLMConfig, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LLMConfig)
	err := c.cc.Invoke(ctx, Agent_SetGlobalEmbeddingLLMConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) RunAgentInstruction(ctx context.Context, in *RunAgentInstructionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TaskStream], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Agent_ServiceDesc.Streams[0], Agent_RunAgentInstruction_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RunAgentInstructionRequest, TaskStream]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Agent_RunAgentInstructionClient = grpc.ServerStreamingClient[TaskStream]

func (c *agentClient) RunAgentInstructionAsync(ctx context.Context, in *RunAgentInstructionRequest, opts ...grpc.CallOption) (*RunAgentInstructionAsyncResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RunAgentInstructionAsyncResponse)
	err := c.cc.Invoke(ctx, Agent_RunAgentInstructionAsync_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) GetAgentTaskStream(ctx context.Context, in *GetAgentTaskStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetAgentTaskStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Agent_ServiceDesc.Streams[1], Agent_GetAgentTaskStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetAgentTaskStreamRequest, GetAgentTaskStreamResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Agent_GetAgentTaskStreamClient = grpc.ServerStreamingClient[GetAgentTaskStreamResponse]

func (c *agentClient) QueryTaskStatus(ctx context.Context, in *QueryTaskStatusRequest, opts ...grpc.CallOption) (*QueryTaskStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryTaskStatusResponse)
	err := c.cc.Invoke(ctx, Agent_QueryTaskStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentServer is the server API for Agent service.
// All implementations must embed UnimplementedAgentServer
// for forward compatibility.
type AgentServer interface {
	// get agent info
	GetAgentInfo(context.Context, *GetAgentInfoRequest) (*AgentInfo, error)
	// get agent config
	GetGlobalCommonConfig(context.Context, *GetGlobalCommonConfigRequest) (*CommonConfig, error)
	GetCommonConfig(context.Context, *GetCommonConfigRequest) (*CommonConfig, error)
	// set agent config
	SetGlobalCommonConfig(context.Context, *SetGlobalCommonConfigRequest) (*SetCommonConfigResponse, error)
	SetGlobalCommonLLMConfig(context.Context, *SetGlobalCommonLLMConfigRequest) (*LLMConfig, error)
	SetGlobalGroundingLLMConfig(context.Context, *SetGlobalGroundingLLMConfigRequest) (*LLMConfig, error)
	// set agent embedding
	SetGlobalEmbeddingLLMConfig(context.Context, *SetGlobalEmbeddingLLMConfigRequest) (*LLMConfig, error)
	// run agent sync
	RunAgentInstruction(*RunAgentInstructionRequest, grpc.ServerStreamingServer[TaskStream]) error
	// run agent async
	RunAgentInstructionAsync(context.Context, *RunAgentInstructionRequest) (*RunAgentInstructionAsyncResponse, error)
	// get agent task stream
	GetAgentTaskStream(*GetAgentTaskStreamRequest, grpc.ServerStreamingServer[GetAgentTaskStreamResponse]) error
	// query task status
	QueryTaskStatus(context.Context, *QueryTaskStatusRequest) (*QueryTaskStatusResponse, error)
	mustEmbedUnimplementedAgentServer()
}

// UnimplementedAgentServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAgentServer struct{}

func (UnimplementedAgentServer) GetAgentInfo(context.Context, *GetAgentInfoRequest) (*AgentInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgentInfo not implemented")
}
func (UnimplementedAgentServer) GetGlobalCommonConfig(context.Context, *GetGlobalCommonConfigRequest) (*CommonConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGlobalCommonConfig not implemented")
}
func (UnimplementedAgentServer) GetCommonConfig(context.Context, *GetCommonConfigRequest) (*CommonConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommonConfig not implemented")
}
func (UnimplementedAgentServer) SetGlobalCommonConfig(context.Context, *SetGlobalCommonConfigRequest) (*SetCommonConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGlobalCommonConfig not implemented")
}
func (UnimplementedAgentServer) SetGlobalCommonLLMConfig(context.Context, *SetGlobalCommonLLMConfigRequest) (*LLMConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGlobalCommonLLMConfig not implemented")
}
func (UnimplementedAgentServer) SetGlobalGroundingLLMConfig(context.Context, *SetGlobalGroundingLLMConfigRequest) (*LLMConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGlobalGroundingLLMConfig not implemented")
}
func (UnimplementedAgentServer) SetGlobalEmbeddingLLMConfig(context.Context, *SetGlobalEmbeddingLLMConfigRequest) (*LLMConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGlobalEmbeddingLLMConfig not implemented")
}
func (UnimplementedAgentServer) RunAgentInstruction(*RunAgentInstructionRequest, grpc.ServerStreamingServer[TaskStream]) error {
	return status.Errorf(codes.Unimplemented, "method RunAgentInstruction not implemented")
}
func (UnimplementedAgentServer) RunAgentInstructionAsync(context.Context, *RunAgentInstructionRequest) (*RunAgentInstructionAsyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunAgentInstructionAsync not implemented")
}
func (UnimplementedAgentServer) GetAgentTaskStream(*GetAgentTaskStreamRequest, grpc.ServerStreamingServer[GetAgentTaskStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetAgentTaskStream not implemented")
}
func (UnimplementedAgentServer) QueryTaskStatus(context.Context, *QueryTaskStatusRequest) (*QueryTaskStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTaskStatus not implemented")
}
func (UnimplementedAgentServer) mustEmbedUnimplementedAgentServer() {}
func (UnimplementedAgentServer) testEmbeddedByValue()               {}

// UnsafeAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentServer will
// result in compilation errors.
type UnsafeAgentServer interface {
	mustEmbedUnimplementedAgentServer()
}

func RegisterAgentServer(s grpc.ServiceRegistrar, srv AgentServer) {
	// If the following call pancis, it indicates UnimplementedAgentServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Agent_ServiceDesc, srv)
}

func _Agent_GetAgentInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAgentInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).GetAgentInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_GetAgentInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).GetAgentInfo(ctx, req.(*GetAgentInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_GetGlobalCommonConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGlobalCommonConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).GetGlobalCommonConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_GetGlobalCommonConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).GetGlobalCommonConfig(ctx, req.(*GetGlobalCommonConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_GetCommonConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommonConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).GetCommonConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_GetCommonConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).GetCommonConfig(ctx, req.(*GetCommonConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_SetGlobalCommonConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGlobalCommonConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).SetGlobalCommonConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_SetGlobalCommonConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).SetGlobalCommonConfig(ctx, req.(*SetGlobalCommonConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_SetGlobalCommonLLMConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGlobalCommonLLMConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).SetGlobalCommonLLMConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_SetGlobalCommonLLMConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).SetGlobalCommonLLMConfig(ctx, req.(*SetGlobalCommonLLMConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_SetGlobalGroundingLLMConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGlobalGroundingLLMConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).SetGlobalGroundingLLMConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_SetGlobalGroundingLLMConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).SetGlobalGroundingLLMConfig(ctx, req.(*SetGlobalGroundingLLMConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_SetGlobalEmbeddingLLMConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGlobalEmbeddingLLMConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).SetGlobalEmbeddingLLMConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_SetGlobalEmbeddingLLMConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).SetGlobalEmbeddingLLMConfig(ctx, req.(*SetGlobalEmbeddingLLMConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_RunAgentInstruction_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RunAgentInstructionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentServer).RunAgentInstruction(m, &grpc.GenericServerStream[RunAgentInstructionRequest, TaskStream]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Agent_RunAgentInstructionServer = grpc.ServerStreamingServer[TaskStream]

func _Agent_RunAgentInstructionAsync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunAgentInstructionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).RunAgentInstructionAsync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_RunAgentInstructionAsync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).RunAgentInstructionAsync(ctx, req.(*RunAgentInstructionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_GetAgentTaskStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAgentTaskStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentServer).GetAgentTaskStream(m, &grpc.GenericServerStream[GetAgentTaskStreamRequest, GetAgentTaskStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Agent_GetAgentTaskStreamServer = grpc.ServerStreamingServer[GetAgentTaskStreamResponse]

func _Agent_QueryTaskStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTaskStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).QueryTaskStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_QueryTaskStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).QueryTaskStatus(ctx, req.(*QueryTaskStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Agent_ServiceDesc is the grpc.ServiceDesc for Agent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Agent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lybic.agent.Agent",
	HandlerType: (*AgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAgentInfo",
			Handler:    _Agent_GetAgentInfo_Handler,
		},
		{
			MethodName: "GetGlobalCommonConfig",
			Handler:    _Agent_GetGlobalCommonConfig_Handler,
		},
		{
			MethodName: "GetCommonConfig",
			Handler:    _Agent_GetCommonConfig_Handler,
		},
		{
			MethodName: "SetGlobalCommonConfig",
			Handler:    _Agent_SetGlobalCommonConfig_Handler,
		},
		{
			MethodName: "SetGlobalCommonLLMConfig",
			Handler:    _Agent_SetGlobalCommonLLMConfig_Handler,
		},
		{
			MethodName: "SetGlobalGroundingLLMConfig",
			Handler:    _Agent_SetGlobalGroundingLLMConfig_Handler,
		},
		{
			MethodName: "SetGlobalEmbeddingLLMConfig",
			Handler:    _Agent_SetGlobalEmbeddingLLMConfig_Handler,
		},
		{
			MethodName: "RunAgentInstructionAsync",
			Handler:    _Agent_RunAgentInstructionAsync_Handler,
		},
		{
			MethodName: "QueryTaskStatus",
			Handler:    _Agent_QueryTaskStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RunAgentInstruction",
			Handler:       _Agent_RunAgentInstruction_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAgentTaskStream",
			Handler:       _Agent_GetAgentTaskStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/agent/agent.proto",
}

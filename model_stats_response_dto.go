// Code generated by OpenAPI Generator. DO NOT EDIT.
//
// lybic
//
// No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
//
// API version: 0.6.3
// Generated by: OpenAPI Generator (https://openapi-generator.tech)
//

package lybic

import (
	"encoding/json"
)

// StatsResponseDto struct for StatsResponseDto
type StatsResponseDto struct {
	// Number of MCP servers
	McpServers float32 `json:"mcpServers"`
	// Number of sandboxes
	Sandboxes float32 `json:"sandboxes"`
	// Number of projects
	Projects float32 `json:"projects"`
}

// NewStatsResponseDto instantiates a new StatsResponseDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatsResponseDto(mcpServers float32, sandboxes float32, projects float32, ) *StatsResponseDto {
	this := StatsResponseDto{}
	this.McpServers = mcpServers
	this.Sandboxes = sandboxes
	this.Projects = projects
	return &this
}

// NewStatsResponseDtoWithDefaults instantiates a new StatsResponseDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatsResponseDtoWithDefaults() *StatsResponseDto {
	this := StatsResponseDto{}
	return &this
}

// GetMcpServers returns the McpServers field value
func (o *StatsResponseDto) GetMcpServers() float32 {
	if o == nil  {
		var ret float32
		return ret
	}

	return o.McpServers
}

// GetMcpServersOk returns a tuple with the McpServers field value
// and a boolean to check if the value has been set.
func (o *StatsResponseDto) GetMcpServersOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.McpServers, true
}

// SetMcpServers sets field value
func (o *StatsResponseDto) SetMcpServers(v float32) {
	o.McpServers = v
}

// GetSandboxes returns the Sandboxes field value
func (o *StatsResponseDto) GetSandboxes() float32 {
	if o == nil  {
		var ret float32
		return ret
	}

	return o.Sandboxes
}

// GetSandboxesOk returns a tuple with the Sandboxes field value
// and a boolean to check if the value has been set.
func (o *StatsResponseDto) GetSandboxesOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Sandboxes, true
}

// SetSandboxes sets field value
func (o *StatsResponseDto) SetSandboxes(v float32) {
	o.Sandboxes = v
}

// GetProjects returns the Projects field value
func (o *StatsResponseDto) GetProjects() float32 {
	if o == nil  {
		var ret float32
		return ret
	}

	return o.Projects
}

// GetProjectsOk returns a tuple with the Projects field value
// and a boolean to check if the value has been set.
func (o *StatsResponseDto) GetProjectsOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Projects, true
}

// SetProjects sets field value
func (o *StatsResponseDto) SetProjects(v float32) {
	o.Projects = v
}

func (o StatsResponseDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["mcpServers"] = o.McpServers
	}
	if true {
		toSerialize["sandboxes"] = o.Sandboxes
	}
	if true {
		toSerialize["projects"] = o.Projects
	}
	return json.Marshal(toSerialize)
}

type NullableStatsResponseDto struct {
	value *StatsResponseDto
	isSet bool
}

func (v NullableStatsResponseDto) Get() *StatsResponseDto {
	return v.value
}

func (v *NullableStatsResponseDto) Set(val *StatsResponseDto) {
	v.value = val
	v.isSet = true
}

func (v NullableStatsResponseDto) IsSet() bool {
	return v.isSet
}

func (v *NullableStatsResponseDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatsResponseDto(val *StatsResponseDto) *NullableStatsResponseDto {
	return &NullableStatsResponseDto{value: val, isSet: true}
}

func (v NullableStatsResponseDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatsResponseDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
